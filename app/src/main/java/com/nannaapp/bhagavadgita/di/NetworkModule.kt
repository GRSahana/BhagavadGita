package com.nannaapp.bhagavadgita.di

import android.content.Context
import com.bumptech.glide.Glide
import com.bumptech.glide.load.engine.DiskCacheStrategy
import com.bumptech.glide.request.RequestOptions
import com.nannaapp.bhagavadgita.R
import com.nannaapp.bhagavadgita.database.ChapterDao
import com.nannaapp.bhagavadgita.network.BhagavadgitaApi
import com.nannaapp.bhagavadgita.repository.MainRepository
import dagger.Module
import dagger.Provides
import dagger.hilt.InstallIn
import dagger.hilt.android.qualifiers.ApplicationContext
import dagger.hilt.components.SingletonComponent
import retrofit2.Retrofit
import retrofit2.converter.gson.GsonConverterFactory
import javax.inject.Singleton

//These classes are never used in the class
//ApplicationComponent is autogenerated for us, and it informs that the scope of the module is throughout the application
@Module
@InstallIn(SingletonComponent::class)
object NetworkModule {

    //turning into dagger provide method
    @Provides
    @Singleton
    fun provideRetrofit(): Retrofit =
        Retrofit.Builder()
            .baseUrl(BhagavadgitaApi.BASE_URL)
            .addConverterFactory(GsonConverterFactory.create())
            .build()

    @Provides
    @Singleton
    fun provideBhagavadgitaApi(retrofit: Retrofit): BhagavadgitaApi =
        retrofit.create(BhagavadgitaApi::class.java)



    @Singleton
    @Provides
    fun provideGlideInstance(
        @ApplicationContext context: Context
    ) = Glide
        .with(context)
        .setDefaultRequestOptions(
            RequestOptions()
                .placeholder(R.drawable.ic_image)
                .error(R.drawable.ic_image)
                .diskCacheStrategy(DiskCacheStrategy.RESOURCE)
        )

}
